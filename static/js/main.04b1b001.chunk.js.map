{"version":3,"sources":["utils/request.js","components/Banner/styles.js","components/Banner/index.js","components/Row/styles.js","components/Row/index.js","components/ListOfRows/index.js","components/App/index.js","serviceWorker.js","utils/Contex.js","index.js"],"names":["API_KEY","baseUrl","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchAnimated","instance","request","fetch","Header","styled","header","image","css","Buttons","div","Button","button","Description","h2","Title","h1","HeaderContent","Banner","str","n","useState","undefined","movie","setMovie","isChange","setIsChange","useEffect","a","then","result","json","data","results","Math","floor","random","length","fetchData","interval","setInterval","number","clearInterval","console","log","backdrop_path","title","name","original_name","overview","substr","ListOfCards","Poster","img","isLargeRow","Row","fetchUrl","movies","SetMovies","response","map","key","id","src","poster_path","alt","ListOfRows","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","Context","createContext","ContextProvider","children","Provider","root","document","getElementById","render","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.04b1b001.chunk.js","sourcesContent":["//Create const to key\nconst API_KEY = 'e6aa719396ca92fd4e89ec1290fcd823';\n\n//create const to baseurl to bring images\nexport const baseUrl = 'https://image.tmdb.org/t/p/original';\n\nexport const requests = {\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n\tfetchAnimated: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\n};\n\n//base url to make requests to the movie database and also export it\nexport const instance = (request) =>\n\tfetch(`https://api.themoviedb.org/3${request}`);\n","//import styled component\nimport styled, { css } from 'styled-components';\n//import base url\nimport { baseUrl } from '../../utils/request';\n\n//create and export header component\nexport const Header = styled.header`\n\t${({ image }) =>\n\t\timage &&\n\t\tcss`\n\t\t\tbackground: url(${baseUrl}${image}) no-repeat center center;\n\t\t`};\n\n\tbackground-size: cover;\n\tobject-fit: cover;\n\theight: 45rem;\n`;\n\n//create and export buttons component\nexport const Buttons = styled.div``;\n\n//create and export button component\nexport const Button = styled.button`\n\tcursor: pointer;\n\tcolor: #fff;\n\toutline: none;\n\tborder: none;\n\tfont-weight: 700;\n\tborder-radius: 0.2vw;\n\tpadding: 0 2rem;\n\tmargin-right: 1rem;\n\tpadding-top: 0.5rem;\n\tbackground-color: rgba(51, 51, 51, 0.5);\n\tpadding-bottom: 0.5rem;\n\n\t:hover {\n\t\tcolor: black;\n\t\tbackground: #e6e6e6;\n\t\ttransition: all 0.2s;\n\t}\n`;\n\n//create and export button component\nexport const Description = styled.h2`\n\twidth: 45rem;\n\tline-height: 1.3;\n\tpadding-top: 1rem;\n\tfont-size: 1.5rem;\n\tmax-width: 60%;\n`;\n\n//create and export button component\nexport const Title = styled.h1`\n\tfont-size: 3rem;\n\tfont-weight: 800;\n\tpadding-bottom: 0.3rem;\n`;\n\n//create and export content component\nexport const HeaderContent = styled.div`\n\tmargin-left: 3rem;\n\tpadding-top: 14rem;\n\theight: 19rem;\n`;\n","//import React\nimport React, { useState, useEffect } from 'react';\n//import the request\nimport { instance, requests } from '../../utils/request';\n//import styled components\nimport {\n\tHeader,\n\tButtons,\n\tButton,\n\tDescription,\n\tHeaderContent,\n\tTitle,\n} from './styles';\n\n//create and export banner component into a functional component\nexport const Banner = () => {\n\t//use local state with react hooks\n\tconst [movie, setMovie] = useState([undefined]);\n\tconst [isChange, setIsChange] = useState(0);\n\n\t//truncate function\n\t/**\n\t * @description: Allow to make more small description of the movies\n\t */\n\tconst truncate = (str, n) => {\n\t\treturn str?.length > n ? str.substr(0, n - 1) + '...' : str;\n\t};\n\n\t//use effect react hook\n\t/**\n\t * @description: make a request to tmdb and return the netflix originals\n\t */\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tconst request = await instance(requests.fetchNetflixOriginals)\n\t\t\t\t.then((result) => result.json())\n\t\t\t\t.then((data) => data.results);\n\t\t\tsetMovie(request[Math.floor(Math.random() * request.length)]);\n\t\t}\n\n\t\tfetchData();\n\t}, [isChange]);\n\n\t//set interval\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tsetIsChange((number) => number + 1);\n\t\t}, 1000 * 30);\n\t\treturn () => clearInterval(interval);\n\t}, []);\n\n\tconsole.log(movie.backdrop_path);\n\n\treturn (\n\t\t<Header image={movie.backdrop_path}>\n\t\t\t<HeaderContent>\n\t\t\t\t{/*Title*/}\n\t\t\t\t<Title>{movie?.title || movie?.name || movie?.original_name}</Title>\n\t\t\t\t{/*div > 2 buttons*/}\n\t\t\t\t<Buttons>\n\t\t\t\t\t<Button>Play</Button>\n\t\t\t\t\t<Button>My list</Button>\n\t\t\t\t</Buttons>\n\t\t\t\t{/*description*/}\n\t\t\t\t<Description>{truncate(movie?.overview, 150)}</Description>\n\t\t\t</HeaderContent>\n\t\t</Header>\n\t);\n};\n","//import styled component\nimport styled, { css } from 'styled-components';\n\n//create and import ListOfCards\nexport const ListOfCards = styled.div`\n\tdisplay: flex;\n\toverflow-y: hidden;\n\toverflow-x: scroll;\n\tpadding: 2rem;\n\n\t::-webkit-scrollbar {\n\t\tdisplay: none;\n\t}\n\n\t@media screen and (max-width: 600px) {\n\t\tdisplay: grid !important;\n\t\tgrid-template-columns: 1fr 1fr 1fr 1fr !important;\n\t}\n`;\n\n//create and import Image\nexport const Poster = styled.img`\n\tobject-fit: contain;\n\twidth: 100%;\n\t${({ isLargeRow }) =>\n\t\tisLargeRow === true\n\t\t\t? css`\n\t\t\t\t\tmax-width: 25rem;\n\t\t\t\t\ttransform: scale(1.1);\n\t\t\t  `\n\t\t\t: css`\n\t\t\t\t\tmax-width: 15rem;\n\t\t\t  `};\n\tmargin-right: 1rem;\n\ttransition: transform 450ms;\n\n\t:hover {\n\t\ttransform: scale(1.08);\n\t}\n\n\t@media screen and (max-width: 600px) {\n\t\tmax-width: 10rem !important;\n\t}\n`;\n\n//create and import Image\nexport const Title = styled.h2`\n\ttext-align: center;\n\tcolor: white;\n\tfont-size: 4rem;\n\n\t@media screen and (max-width: 600px) {\n\t\tfont-size: 1.5rem !important;\n\t}\n`;\n","//import React and its hooks\nimport React, { useState, useEffect } from 'react';\n//import instance const\nimport { instance, baseUrl } from '../../utils/request';\n//import styled component\nimport { ListOfCards, Poster, Title } from './styles';\n\n//create and export Row component\nexport const Row = ({ title, fetchUrl, isLargeRow }) => {\n\t//use state hook\n\tconst [movies, SetMovies] = useState([]);\n\n\t//use use effect hook\n\t/**\n\t * @description: make a request to the movie data base and return the response\n\t * in json formant. Also add the movies response to movies state\n\t */\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tconst request = await instance(fetchUrl).then((response) =>\n\t\t\t\tresponse.json(),\n\t\t\t);\n\n\t\t\tSetMovies(request.results);\n\t\t};\n\n\t\tfetchData();\n\t}, [fetchUrl]);\n\n\treturn (\n\t\t<>\n\t\t\t{/*Title*/}\n\t\t\t<Title>{title}</Title>\n\t\t\t{/*List of cards component*/}\n\t\t\t<ListOfCards>\n\t\t\t\t{movies.map((movie) => (\n\t\t\t\t\t<Poster\n\t\t\t\t\t\tkey={movie.id}\n\t\t\t\t\t\tsrc={`${baseUrl}${\n\t\t\t\t\t\t\tisLargeRow ? movie.poster_path : movie.backdrop_path\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\talt={movie.name ? movie.name : movie.title}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ListOfCards>\n\t\t</>\n\t);\n};\n","//import React\nimport React from 'react';\n//import row component\nimport { Row } from '../Row';\n//import the endpoints\nimport { requests } from '../../utils/request';\n\n//create and export Row component\nexport const ListOfRows = () => {\n\treturn (\n\t\t<>\n\t\t\t<Row\n\t\t\t\ttitle='Netflix Originals'\n\t\t\t\tfetchUrl={requests.fetchNetflixOriginals}\n\t\t\t\tisLargeRow={true}\n\t\t\t/>\n\t\t\t<Row title='Trending' fetchUrl={requests.fetchTrending} />\n\t\t\t<Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\n\t\t\t<Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\n\t\t\t<Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\n\t\t\t<Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n\t\t\t<Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n\t\t\t<Row title='Animated' fetchUrl={requests.fetchAnimated} />\n\t\t</>\n\t);\n};\n","//import react\nimport React from 'react';\nimport { Banner } from '../Banner';\n//import list of rows component\nimport { ListOfRows } from '../ListOfRows';\n\n//create and export app component\nexport const App = () => {\n\treturn (\n\t\t<>\n\t\t\t<Banner />\n\t\t\t<ListOfRows />;\n\t\t</>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//import react\nimport React, { createContext } from 'react';\n//create context and export it\nexport const Context = createContext();\n\n//create and export provider\nexport const ContextProvider = ({ children }) => {\n\treturn (\n\t\t<>\n\t\t\t<Context.Provider>{children}</Context.Provider>\n\t\t</>\n\t);\n};\n","//import react\nimport React from 'react';\n//import render method\nimport { render } from 'react-dom';\n//import app component\nimport { App } from './components/App';\n//import serviceWorker\nimport * as serviceWorker from './serviceWorker';\n//import context provider\nimport { ContextProvider } from './utils/Contex';\n//import global styles\nimport './GlobalStyles.css'\n\n//root const\nconst root = document.getElementById('root');\n\nrender(\n\t<ContextProvider>\n\t\t<App />\n\t</ContextProvider>,\n\troot,\n);\n\n//call the serviceWorker\nserviceWorker.register();\n"],"sourceRoot":""}